from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes



# establishes parameters like key and initialization vector along with asking for user's sample text
plaintext = input("Enter plaintext: ")
key = get_random_bytes(32)
iv = pad(b"myiv", AES.block_size)
print("Provided text sample: ", plaintext)


# function to encrypt the provided text sample
def _encrypt(plaintext):
    data_bytes = bytes(plaintext, 'utf-8')
    padded_bytes = pad(data_bytes, AES.block_size)
    AES_object = AES.new(key, AES.MODE_CBC, iv)
    ciphertext = AES_object.encrypt(padded_bytes)
    return ciphertext


# prints out encrypted text along with provided sample text for reference
ciphertext = _encrypt(plaintext)
print("Encrypted text sample: ", ciphertext)



# function to decrypt sample text from above
def _decrypt(ciphertext):
    AES_object = AES.new(key, AES.MODE_CBC, iv)
    raw_bytes = AES_object.decrypt(ciphertext)
    extracted_bytes = unpad(raw_bytes, AES.block_size)
    return extracted_bytes


# prints out decrypted text
plaintext = _decrypt(ciphertext)
print("Decrypted sample text: ", plaintext)

